#!/usr/bin/env python

import argparse, logging
from os import getcwd
from itertools import product
from pdbParser import parser as pP
from pdbParser import readpdb as rp
from pdbParser import writepdb as wp
from pdbParser import alignment as a
from pdbParser import prepENS as pE
from pdbParser import formatargs as fa

argsparser = argparse.ArgumentParser(
    description="Preparing structures for eBDIMs calculations or ensembles for PCA analysis"
)
argsparser.add_argument("--start", metavar="PDB File", nargs=1, help="Starting structure")
argsparser.add_argument("--target", metavar="PDB File", nargs=1, help="Target structure")
argsparser.add_argument("--download", dest="download", help="Download from RCSB", action='store_true')
argsparser.set_defaults(download=False)
argsparser.add_argument(
    "--schains", dest="schains", help="Supply the chain ids of the starting structure: A-E or A,B,C"
)
argsparser.set_defaults(schains="A")
argsparser.add_argument("--echains", dest="echains", help="Supply the chain ids of the target structure: A-E or A,B,C")
argsparser.set_defaults(echains="A")
argsparser.add_argument(
    "--multimeric", dest="mer", help="If the protein is multimeric provide the number of chains. Default is 1", type=int
)
argsparser.set_defaults(mer=1)
argsparser.add_argument(
    "--dir", dest="cwd", help="The directory to save the output files. Default is current work directory."
)
argsparser.set_defaults(cwd=getcwd())
argsparser.add_argument("--altloc", dest="altloc", help="Alternative location to be extracted, default is A")
argsparser.set_defaults(altloc="A")
argsparser.add_argument(
    "--prepENS",
    dest="query",
    metavar="Uniport ID",
    nargs=1,
    help="This argument accepts a Uniprot ID, and returns the PDB Files that are complete. PDB IDs with missing residues are written with the flat broken_ . When this argument is given, all the other arguments except for multimeric is ignored. Command line supports only a single entry, for multiple uniprot ids please use pdbParser as a package. ",
)
argsparser.add_argument(
    "--exclude",
    dest="exclude",
    metavar="PDB IDs to skip",
    help="Provide a list of PDBs to skip: in the form of ID1A,ID1B,...",
)
argsparser.set_defaults(prepENS=None)
argsparser.set_defaults(exclude=None)

args = argsparser.parse_args()
eid = ""
sid = ""
try:
    sid = args.start[0]
    eid = args.target[0]
except TypeError:
    if args.prepENS is None:
        argsparser.print_help()
        exit()
    else:
        pass

logging.info(
    "Output directory is %s.\n\t If the input files are not given with full path, current working directory is used to search."
    % args.cwd
)

# Below does the prepENS and then exits. So the rest of the commands are ignored.
if args.prepENS is not None and args.mer is not None:
    if args.exclude is not None:
        exclude = args.exclude.split()
    else:
        exclude = None
    info = pE.PDBInfo(args.prepENS, args.mer, exclude)
    # pE.downloadPDB(info, args.cwd)
    clustal = args.clustal
    pE.msa(info, args.cwd, clustal)
    pE.getcore(info, args.cwd)
    exit()

schains = fa.split_mer(args.mer, fa.format_ch(args.schains))
echains = fa.split_mer(args.mer, fa.format_ch(args.echains))

# toAlign=True


def obtain_structure(idx, chains, altloc, download):
    start = rp.getpdb(idx, download)
    if rp.checkmulti(start):
        raise ValueError("PDB files with multiple models are not supported.")
    ca = pP.parse_ca(start, chains, altloc)
    return ca


outf = args.cwd + "/error.dat"
logging.basicConfig(level=logging.INFO, filename=outf)
# For monomeric assemblies we will be checking all the chain combinations until we find a start-target complex that is not broken.

for ch1, ch2 in product(schains, echains):
    logging.info("Processing PDB files")
    start = obtain_structure(sid, ch1, args.altloc, args.download)
    end = obtain_structure(eid, ch2, args.altloc, args.download)
    logging.info("Extracting the core region.")
    if len(ch1) == 1 and len(ch2) == 1:
        score, ecore, correct = a.getaligned(start, end)
    else:
        score, ecore, correct = a.multialigned(start, end, args.mer)
    if correct is True:
        wp.writeca(score, args.cwd + "/start.pdb")
        wp.writeca(ecore, args.cwd + "/target.pdb")
        break
    else:
        continue
